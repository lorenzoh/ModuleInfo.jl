{"attributes":{"kind":"function","backlinks":[],"methods":[{"symbol_id":"Scratch.get_scratch!","module_id":"Scratch","file":"Scratch.jl","line":221,"signature":"(::Signature)"},{"symbol_id":"Scratch.get_scratch!","module_id":"Scratch","file":"Scratch.jl","line":239,"signature":"(::Signature)"}],"package_id":"Scratch@1.1.1","title":"get_scratch!","symbol_id":"Scratch.get_scratch!","exported":true,"module_id":"Scratch"},"tag":"documentation","children":[{"attributes":{"symbol":"Scratch.get_scratch!","line":198,"module":"Scratch","file":"Scratch.jl"},"tag":"docstring","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["get_scratch!(parent_pkg = nothing, key::AbstractString, calling_pkg = parent_pkg)\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Returns the path to (or creates) a space."],"type":"node"},{"attributes":{},"tag":"p","children":["If ",{"attributes":{},"tag":"code","children":["parent_pkg"],"type":"node"}," is given (either as a ",{"attributes":{},"tag":"code","children":["UUID"],"type":"node"}," or as a ",{"attributes":{},"tag":"code","children":["Module"],"type":"node"},"), the scratch space is namespaced with that package's UUID, so that it will not conflict with any other space with the same name but a different parent package UUID.  The space's lifecycle is tied to the calling package, allowing the space to be garbage collected if all versions of the package that used it have been removed.  By default, ",{"attributes":{},"tag":"code","children":["parent_pkg"],"type":"node"}," and ",{"attributes":{},"tag":"code","children":["calling_pkg"],"type":"node"}," are the same, however in rare cases a package may become dependent on a scratch space that is namespaced within another package, in such cases they should identify themselves as the ",{"attributes":{},"tag":"code","children":["calling_pkg"],"type":"node"}," so that the scratch space's lifecycle is tied to that calling package."],"type":"node"},{"attributes":{},"tag":"p","children":["If ",{"attributes":{},"tag":"code","children":["parent_pkg"],"type":"node"}," is not defined, or is a ",{"attributes":{},"tag":"code","children":["Module"],"type":"node"}," without a root UUID (e.g. ",{"attributes":{},"tag":"code","children":["Main"],"type":"node"},", ",{"attributes":{},"tag":"code","children":["Base"],"type":"node"},", an anonymous module, etc...) the created scratch space is namespaced within the global environment for the current version of Julia."],"type":"node"},{"attributes":{},"tag":"p","children":["Scratch spaces are removed if all calling projects that have accessed them are removed. As an example, if a scratch space is used by two versions of the same package but not a newer version, when the two older versions are removed the scratch space may be garbage collected.  See ",{"attributes":{},"tag":"code","children":["Pkg.gc()"],"type":"node"}," and ",{"attributes":{},"tag":"code","children":["track_scratch_access()"],"type":"node"}," for more details."],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}