{"attributes":{"kind":"function","backlinks":[],"methods":[{"symbol_id":"StructTypes.construct","module_id":"StructTypes","file":"StructTypes.jl","line":361,"signature":"(::Signature)"},{"symbol_id":"StructTypes.construct","module_id":"StructTypes","file":"StructTypes.jl","line":362,"signature":"(::Signature)"},{"symbol_id":"StructTypes.construct","module_id":"StructTypes","file":"StructTypes.jl","line":363,"signature":"(::Signature)"},{"symbol_id":"StructTypes.construct","module_id":"StructTypes","file":"StructTypes.jl","line":523,"signature":"(::Signature)"},{"symbol_id":"StructTypes.construct","module_id":"StructTypes","file":"StructTypes.jl","line":458,"signature":"(::Signature)"},{"symbol_id":"StructTypes.construct","module_id":"StructTypes","file":"StructTypes.jl","line":441,"signature":"(::Signature)"},{"symbol_id":"StructTypes.construct","module_id":"StructTypes","file":"StructTypes.jl","line":442,"signature":"(::Signature)"},{"symbol_id":"StructTypes.construct","module_id":"StructTypes","file":"StructTypes.jl","line":444,"signature":"(::Signature)"},{"symbol_id":"StructTypes.construct","module_id":"StructTypes","file":"StructTypes.jl","line":455,"signature":"(::Signature)"},{"symbol_id":"StructTypes.construct","module_id":"StructTypes","file":"StructTypes.jl","line":329,"signature":"(::Signature)"},{"symbol_id":"StructTypes.construct","module_id":"StructTypes","file":"StructTypes.jl","line":896,"signature":"(::Signature)"},{"symbol_id":"StructTypes.construct","module_id":"StructTypes","file":"StructTypes.jl","line":608,"signature":"(::Signature)"},{"symbol_id":"StructTypes.construct","module_id":"StructTypes","file":"StructTypes.jl","line":431,"signature":"(::Signature)"},{"symbol_id":"StructTypes.construct","module_id":"StructTypes","file":"StructTypes.jl","line":457,"signature":"(::Signature)"},{"symbol_id":"StructTypes.construct","module_id":"StructTypes","file":"StructTypes.jl","line":456,"signature":"(::Signature)"},{"symbol_id":"StructTypes.construct","module_id":"StructTypes","file":"StructTypes.jl","line":328,"signature":"(::Signature)"},{"symbol_id":"StructTypes.construct","module_id":"StructTypes","file":"StructTypes.jl","line":327,"signature":"(::Signature)"}],"package_id":"StructTypes@1.10.0","title":"construct","symbol_id":"StructTypes.construct","exported":false,"module_id":"StructTypes"},"tag":"documentation","children":[{"attributes":{"symbol":"StructTypes.construct","line":321,"module":"StructTypes","file":"StructTypes.jl"},"tag":"docstring","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["StructTypes.construct(T, args...; kw...)\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Function that custom types can overload for their ",{"attributes":{},"tag":"code","children":["T"],"type":"node"}," to construct an instance, given ",{"attributes":{},"tag":"code","children":["args..."],"type":"node"}," and ",{"attributes":{},"tag":"code","children":["kw..."],"type":"node"},". The default definition is ",{"attributes":{},"tag":"code","children":["StructTypes.construct(T, args...; kw...) = T(args...; kw...)"],"type":"node"},"."],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{"symbol":"StructTypes.construct","line":601,"module":"StructTypes","file":"StructTypes.jl"},"tag":"docstring","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["StructTypes.construct(f, T) => T\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Apply function ",{"attributes":{},"tag":"code","children":["f(i, name, FT)"],"type":"node"}," over each field index ",{"attributes":{},"tag":"code","children":["i"],"type":"node"},", field name ",{"attributes":{},"tag":"code","children":["name"],"type":"node"},", and field type ",{"attributes":{},"tag":"code","children":["FT"],"type":"node"}," of type ",{"attributes":{},"tag":"code","children":["T"],"type":"node"},", passing the function results to ",{"attributes":{},"tag":"code","children":["T"],"type":"node"}," for construction, like ",{"attributes":{},"tag":"code","children":["T(x_1, x_2, ...)"],"type":"node"},". Note that any ",{"attributes":{},"tag":"code","children":["StructTypes.names"],"type":"node"}," mappings are applied, as well as field-specific keyword arguments via ",{"attributes":{},"tag":"code","children":["StructTypes.keywordargs"],"type":"node"},"."],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}