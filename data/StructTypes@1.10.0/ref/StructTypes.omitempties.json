{"attributes":{"kind":"function","backlinks":[],"methods":[{"symbol_id":"StructTypes.omitempties","module_id":"StructTypes","file":"StructTypes.jl","line":207,"signature":"(::Signature)"},{"symbol_id":"StructTypes.omitempties","module_id":"StructTypes","file":"StructTypes.jl","line":206,"signature":"(::Signature)"}],"package_id":"StructTypes@1.10.0","title":"omitempties","symbol_id":"StructTypes.omitempties","exported":false,"module_id":"StructTypes"},"tag":"documentation","children":[{"attributes":{"symbol":"StructTypes.omitempties","line":193,"module":"StructTypes","file":"StructTypes.jl"},"tag":"docstring","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["StructTypes.omitempties(::Type{T}) = (:field1, :field2)\nStructTypes.omitempties(::Type{T}) = true\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Specify for a ",{"attributes":{},"tag":"code","children":["StructTypes.Mutable"],"type":"node"}," ",{"attributes":{},"tag":"code","children":["StructType"],"type":"node"}," the fields, given as a ",{"attributes":{},"tag":"code","children":["Tuple"],"type":"node"}," of ",{"attributes":{},"tag":"code","children":["Symbol"],"type":"node"},"s, that should not be serialized if they're considered \"empty\"."],"type":"node"},{"attributes":{},"tag":"p","children":["If a field is a collection (AbstractDict, AbstractArray, etc.) and ",{"attributes":{},"tag":"code","children":["isempty(x) === true"],"type":"node"},", then it will not be serialized. If a field is ",{"attributes":{},"tag":"code","children":["#undef"],"type":"node"},", it will not be serialized. If a field is ",{"attributes":{},"tag":"code","children":["nothing"],"type":"node"},", it will not be serialized. To apply this to all fields of ",{"attributes":{},"tag":"code","children":["T"],"type":"node"},", set ",{"attributes":{},"tag":"code","children":["StructTypes.omitempties(::Type{T}) = true"],"type":"node"},". You can customize this behavior. For example, by default, ",{"attributes":{},"tag":"code","children":["missing"],"type":"node"}," is not considered to be \"empty\". If you want ",{"attributes":{},"tag":"code","children":["missing"],"type":"node"}," to be considered \"empty\" when serializing your type ",{"attributes":{},"tag":"code","children":["MyType"],"type":"node"},", simply define:"],"type":"node"},{"attributes":{"lang":"julia"},"tag":"codeblock","children":[{"attributes":{},"tag":"julia","children":[{"attributes":{},"tag":"macrocall","children":[{"attributes":{},"tag":"@","children":["@"],"type":"node"},{"attributes":{},"tag":"MacroName","children":["inline"],"type":"node"},{"attributes":{},"tag":"=","children":[{"attributes":{},"tag":"where","children":[{"attributes":{},"tag":"Whitespace","children":[" "],"type":"node"},{"attributes":{},"tag":"call","children":[{"attributes":{},"tag":".","children":[{"attributes":{"reftype":"symbol","document_id":"StructTypes@1.10.0/ref/StructTypes"},"tag":"reference","children":["StructTypes"],"type":"node"},{"attributes":{},"tag":".","children":["."],"type":"node"},{"attributes":{},"tag":"quote","children":[{"attributes":{"reftype":"symbol","document_id":"StructTypes@1.10.0/ref/StructTypes.isempty"},"tag":"reference","children":["isempty"],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"(","children":["("],"type":"node"},{"attributes":{},"tag":"::","children":[{"attributes":{},"tag":"::","children":["::"],"type":"node"},{"attributes":{},"tag":"curly","children":[{"attributes":{},"tag":"Identifier","children":["Type"],"type":"node"},{"attributes":{},"tag":"{","children":["{"],"type":"node"},{"attributes":{},"tag":"Identifier","children":["T"],"type":"node"},{"attributes":{},"tag":"}","children":["}"],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":",","children":[","],"type":"node"},{"attributes":{},"tag":"Whitespace","children":[" "],"type":"node"},{"attributes":{},"tag":"::","children":[{"attributes":{},"tag":"::","children":["::"],"type":"node"},{"attributes":{},"tag":"Identifier","children":["Missing"],"type":"node"}],"type":"node"},{"attributes":{},"tag":")","children":[")"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"Whitespace","children":[" "],"type":"node"},{"attributes":{},"tag":"where","children":["where"],"type":"node"},{"attributes":{},"tag":"Whitespace","children":[" "],"type":"node"},{"attributes":{},"tag":"{","children":["{"],"type":"node"},{"attributes":{},"tag":"<:","children":[{"attributes":{},"tag":"Identifier","children":["T"],"type":"node"},{"attributes":{},"tag":"Whitespace","children":[" "],"type":"node"},{"attributes":{},"tag":"<:","children":["<:"],"type":"node"},{"attributes":{},"tag":"Whitespace","children":[" "],"type":"node"},{"attributes":{},"tag":"Identifier","children":["MyType"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"}","children":["}"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"Whitespace","children":[" "],"type":"node"},{"attributes":{},"tag":"=","children":["="],"type":"node"},{"attributes":{},"tag":"Whitespace","children":[" "],"type":"node"},{"attributes":{},"tag":"true","children":["true"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}