{"attributes":{"kind":"function","backlinks":[{"tag":"documentation","title":"generate_struct_type_module","docid":"JSON3@1.10.0/ref/JSON3.generate_struct_type_module"},{"tag":"documentation","title":"generatetypes","docid":"JSON3@1.10.0/ref/JSON3.generatetypes"}],"methods":[{"symbol_id":"JSON3.generate_exprs","module_id":"JSON3","file":"gentypes.jl","line":325,"signature":"(::Signature)"}],"package_id":"JSON3@1.10.0","title":"generate_exprs","symbol_id":"JSON3.generate_exprs","exported":false,"module_id":"JSON3"},"tag":"documentation","children":[{"attributes":{"symbol":"JSON3.generate_exprs","line":316,"module":"JSON3","file":"gentypes.jl"},"tag":"docstring","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["JSON3.generate_exprs(raw_type; root_name=:Root, mutable=true)\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Generate a vector of ",{"attributes":{},"tag":"code","children":["Expr"],"type":"node"}," from a \"raw_type\".  This will un-nest any sub-types within the root type."],"type":"node"},{"attributes":{},"tag":"p","children":["The name of the root type is from the ",{"attributes":{},"tag":"code","children":["name"],"type":"node"}," variable (default :Root), then nested types are named from the key that they live under in the JSON.  The key is transformed to be pascal case and singular."],"type":"node"},{"attributes":{},"tag":"p","children":["If ",{"attributes":{},"tag":"code","children":["mutable"],"type":"node"}," is ",{"attributes":{},"tag":"code","children":["true"],"type":"node"},", an empty constructor is included in the struct definition. This allows the mutable structs to be used with ",{"attributes":{},"tag":"code","children":["StructTypes.Mutable()"],"type":"node"}," out of the box."],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}