{"attributes":{"kind":"function","backlinks":[],"methods":[{"symbol_id":"StructTypes.names","module_id":"StructTypes","file":"StructTypes.jl","line":163,"signature":"(::Signature)"},{"symbol_id":"StructTypes.names","module_id":"StructTypes","file":"StructTypes.jl","line":162,"signature":"(::Signature)"}],"package_id":"StructTypes@1.10.0","title":"names","symbol_id":"StructTypes.names","exported":false,"module_id":"StructTypes"},"tag":"documentation","children":[{"attributes":{"symbol":"StructTypes.names","line":152,"module":"StructTypes","file":"StructTypes.jl"},"tag":"docstring","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["StructTypes.names(::Type{T}) = ((:juliafield1, :serializedfield1), (:juliafield2, :serializedfield2))\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Provides a mapping of Julia field name to expected serialized object key name. This affects both reading and writing. When reading the ",{"attributes":{},"tag":"code","children":["serializedfield1"],"type":"node"}," key, the ",{"attributes":{},"tag":"code","children":["juliafield1"],"type":"node"}," field of ",{"attributes":{},"tag":"code","children":["T"],"type":"node"}," will be set. When writing the ",{"attributes":{},"tag":"code","children":["juliafield2"],"type":"node"}," field of ",{"attributes":{},"tag":"code","children":["T"],"type":"node"},", the output key will be ",{"attributes":{},"tag":"code","children":["serializedfield2"],"type":"node"},"."],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}