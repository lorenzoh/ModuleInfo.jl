{"attributes":{"kind":"function","backlinks":[],"methods":[{"symbol_id":"StructTypes.keywordargs","module_id":"StructTypes","file":"StructTypes.jl","line":241,"signature":"(::Signature)"},{"symbol_id":"StructTypes.keywordargs","module_id":"StructTypes","file":"StructTypes.jl","line":240,"signature":"(::Signature)"}],"package_id":"StructTypes@1.10.0","title":"keywordargs","symbol_id":"StructTypes.keywordargs","exported":false,"module_id":"StructTypes"},"tag":"documentation","children":[{"attributes":{"symbol":"StructTypes.keywordargs","line":230,"module":"StructTypes","file":"StructTypes.jl"},"tag":"docstring","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["StructTypes.keywordargs(::Type{MyType}) = (field1=(dateformat=dateformat\"mm/dd/yyyy\",), field2=(dateformat=dateformat\"HH MM SS\",))\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Specify for a ",{"attributes":{},"tag":"code","children":["StructTypes.Mutable"],"type":"node"}," the keyword arguments by field, given as a ",{"attributes":{},"tag":"code","children":["NamedTuple"],"type":"node"}," of ",{"attributes":{},"tag":"code","children":["NamedTuple"],"type":"node"},"s, that should be passed to the ",{"attributes":{},"tag":"code","children":["StructTypes.construct"],"type":"node"}," method when deserializing ",{"attributes":{},"tag":"code","children":["MyType"],"type":"node"},". This essentially allows defining specific keyword arguments you'd like to be passed for each field in your struct. Note that keyword arguments can be passed when reading, like ",{"attributes":{},"tag":"code","children":["JSON3.read(source, MyType; dateformat=...)"],"type":"node"}," and they will be passed down to each ",{"attributes":{},"tag":"code","children":["StructTypes.construct"],"type":"node"}," method. ",{"attributes":{},"tag":"code","children":["StructTypes.keywordargs"],"type":"node"}," just allows the defining of specific keyword arguments per field."],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}