{"attributes":{"kind":"struct","backlinks":[{"tag":"documentation","title":"lower","docid":"StructTypes@1.10.0/ref/StructTypes.lower"}],"methods":[{"symbol_id":"StructTypes.CustomStruct","module_id":"StructTypes","file":"StructTypes.jl","line":28,"signature":"(::Signature)"}],"package_id":"StructTypes@1.10.0","title":"CustomStruct","symbol_id":"StructTypes.CustomStruct","exported":false,"module_id":"StructTypes"},"tag":"documentation","children":[{"attributes":{"symbol":"StructTypes.CustomStruct","line":17,"module":"StructTypes","file":"StructTypes.jl"},"tag":"docstring","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["StructTypes.StructType(::Type{T}) = StructTypes.CustomStruct()\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Signal that ",{"attributes":{},"tag":"code","children":["T"],"type":"node"}," has a custom serialization/deserialization pattern that doesn't quite fit ",{"attributes":{},"tag":"code","children":["StructTypes.DataType"],"type":"node"}," or ",{"attributes":{},"tag":"code","children":["StructTypes.InterfaceType"],"type":"node"},". One common example are wrapper types, where you want to serialize as the wrapped type and can reconstruct ",{"attributes":{},"tag":"code","children":["T"],"type":"node"}," manually from deserialized fields directly. Defining ",{"attributes":{},"tag":"code","children":["CustomStruct()"],"type":"node"}," requires overloading ",{"attributes":{},"tag":"code","children":["StructTypes.lower(x::T)"],"type":"node"},", which should return any serializable object, and optionally overload ",{"attributes":{},"tag":"code","children":["StructTypes.lowertype(::Type{T})"],"type":"node"},", which returns the type of the lowered object (it returns ",{"attributes":{},"tag":"code","children":["Any"],"type":"node"}," by default). ",{"attributes":{},"tag":"code","children":["lowertype"],"type":"node"}," is used to deserialize an object, which is then passed to ",{"attributes":{},"tag":"code","children":["StructTypes.construct(T, obj)"],"type":"node"}," for construction (which defaults to calling ",{"attributes":{},"tag":"code","children":["T(obj)"],"type":"node"},")."],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}